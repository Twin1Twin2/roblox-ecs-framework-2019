{
	"ECS": {
		"prefix": "ECS",
		"description": "Boilerplate for Roblox ECS",
		"scope": "lua",
		"body": [
			"local require = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"Nevermore\"))",
			"",
			"local ECSFramework = require(\"ECSFramework\")"
		]
	},

	"ECS Component": {
		"prefix": "ECS Component",
		"description": "Boilerplate for Roblox ECS",
		"scope": "lua",
		"body": [
			"--- ${1:Component}",
			"--",
			"",
			"local require = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"Nevermore\"))",
			"",
			"local ECSFramework = require(\"ECSFramework\")",
			"local ComponentDescription = ECSFramework.ComponentDescription",
			"",
			"",
			"local ${1:ComponentName} = ComponentDescription.new(\"${1:ComponentName}\")",
			"",
			"${1:ComponentName}.Fields = {",
			"",
			"}",
			"",
			"${1:ComponentName}.Defaults = {",
			"",
			"}",
			"",
			"",
			"return ${1:ComponentName}"
		]
	},

	"ECS System": {
		"prefix": "ECS System",
		"description": "Boilerplate for Roblox ECS System",
		"scope": "lua",
		"body": [
			"--- ${1:SystemName}",
			"--",
			"",
			"local require = require(game:GetService(\"ReplicatedStorage\"):WaitForChild(\"Nevermore\"))",
			"",
			"local ECSFramework = require(\"ECSFramework\")",
			"local System = ECSFramework.System",
			"",
			"",
			"local ${1:SystemName} = {",
			"    ClassName = \"${1:SystemName}\";",
			"}",
			"",
			"${1:SystemName}.__index = ${1:SystemName}",
			"setmetatable(${1:SystemName}, System)",
			"",
			"",
			"function ${1:SystemName}.new()",
			"    local self = setmetatable(System.new(), ${1:SystemName})",
			"",
			"    self.ComponentRequirement",
			"        :All(\"$0\")",
			"",
			"    self.EntityTable.OnInserted:Connect(function(entity)",
			"        self:EntityAdded(entity)",
			"    end)",
			"    self.EntityTable.OnRemoved:Connect(function(entity)",
			"        self:EntityRemoved(entity)",
			"    end)",
			"",
			"",
			"    return self",
			"end",
			"",
			"",
			"function ${1:SystemName}:AddedToWorld(world)",
			"",
			"end",
			"",
			"",
			"function ${1:SystemName}:RemovedFromWorld(world)",
			"",
			"end",
			"",
			"",
			"function ${1:SystemName}:EntityAdded(entity)",
			"",
			"end",
			"",
			"",
			"function ${1:SystemName}:EntityRemoved(entity)",
			"",
			"end",
			"",
			"",
			"function ${1:SystemName}:UpdateEntity(entity)",
			"",
			"end",
			"",
			"",
			"function ${1:SystemName}:Update(entities)",
			"    for _, entity in pairs(entities) do",
			"        self:UpdateEntity(entity)",
			"    end",
			"end",
			"",
			"",
			"return ${1:SystemName}"
		]
	}
}